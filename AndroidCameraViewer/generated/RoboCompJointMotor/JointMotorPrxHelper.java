// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `jointmotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RoboCompJointMotor;

public final class JointMotorPrxHelper extends Ice.ObjectPrxHelperBase implements JointMotorPrx
{
    private static final String __getAllMotorParams_name = "getAllMotorParams";

    public MotorParams[] getAllMotorParams()
    {
        return getAllMotorParams(null, false);
    }

    public MotorParams[] getAllMotorParams(java.util.Map<String, String> __ctx)
    {
        return getAllMotorParams(__ctx, true);
    }

    private MotorParams[] getAllMotorParams(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllMotorParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllMotorParams");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    return __del.getAllMotorParams(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllMotorParams()
    {
        return begin_getAllMotorParams(null, false, null);
    }

    public Ice.AsyncResult begin_getAllMotorParams(java.util.Map<String, String> __ctx)
    {
        return begin_getAllMotorParams(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllMotorParams(Ice.Callback __cb)
    {
        return begin_getAllMotorParams(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorParams(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllMotorParams(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorParams(Callback_JointMotor_getAllMotorParams __cb)
    {
        return begin_getAllMotorParams(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorParams(java.util.Map<String, String> __ctx, Callback_JointMotor_getAllMotorParams __cb)
    {
        return begin_getAllMotorParams(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllMotorParams(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllMotorParams_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllMotorParams_name, __cb);
        try
        {
            __result.__prepare(__getAllMotorParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public MotorParams[] end_getAllMotorParams(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllMotorParams_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            MotorParams[] __ret;
            __ret = MotorParamsListHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllMotorState_name = "getAllMotorState";

    public void getAllMotorState(MotorStateMapHolder mstateMap)
        throws UnknownMotorException
    {
        getAllMotorState(mstateMap, null, false);
    }

    public void getAllMotorState(MotorStateMapHolder mstateMap, java.util.Map<String, String> __ctx)
        throws UnknownMotorException
    {
        getAllMotorState(mstateMap, __ctx, true);
    }

    private void getAllMotorState(MotorStateMapHolder mstateMap, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllMotorState", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllMotorState");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    __del.getAllMotorState(mstateMap, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllMotorState()
    {
        return begin_getAllMotorState(null, false, null);
    }

    public Ice.AsyncResult begin_getAllMotorState(java.util.Map<String, String> __ctx)
    {
        return begin_getAllMotorState(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllMotorState(Ice.Callback __cb)
    {
        return begin_getAllMotorState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllMotorState(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorState(Callback_JointMotor_getAllMotorState __cb)
    {
        return begin_getAllMotorState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllMotorState(java.util.Map<String, String> __ctx, Callback_JointMotor_getAllMotorState __cb)
    {
        return begin_getAllMotorState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllMotorState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllMotorState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllMotorState_name, __cb);
        try
        {
            __result.__prepare(__getAllMotorState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getAllMotorState(MotorStateMapHolder mstateMap, Ice.AsyncResult __result)
        throws UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __getAllMotorState_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            mstateMap.value = MotorStateMapHelper.read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getBusParams_name = "getBusParams";

    public BusParams getBusParams()
    {
        return getBusParams(null, false);
    }

    public BusParams getBusParams(java.util.Map<String, String> __ctx)
    {
        return getBusParams(__ctx, true);
    }

    private BusParams getBusParams(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBusParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBusParams");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    return __del.getBusParams(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBusParams()
    {
        return begin_getBusParams(null, false, null);
    }

    public Ice.AsyncResult begin_getBusParams(java.util.Map<String, String> __ctx)
    {
        return begin_getBusParams(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBusParams(Ice.Callback __cb)
    {
        return begin_getBusParams(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBusParams(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBusParams(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBusParams(Callback_JointMotor_getBusParams __cb)
    {
        return begin_getBusParams(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBusParams(java.util.Map<String, String> __ctx, Callback_JointMotor_getBusParams __cb)
    {
        return begin_getBusParams(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBusParams(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBusParams_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBusParams_name, __cb);
        try
        {
            __result.__prepare(__getBusParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public BusParams end_getBusParams(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBusParams_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            BusParams __ret;
            __ret = new BusParams();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMotorParams_name = "getMotorParams";

    public MotorParams getMotorParams(String motor)
        throws UnknownMotorException
    {
        return getMotorParams(motor, null, false);
    }

    public MotorParams getMotorParams(String motor, java.util.Map<String, String> __ctx)
        throws UnknownMotorException
    {
        return getMotorParams(motor, __ctx, true);
    }

    private MotorParams getMotorParams(String motor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMotorParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMotorParams");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    return __del.getMotorParams(motor, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMotorParams(String motor)
    {
        return begin_getMotorParams(motor, null, false, null);
    }

    public Ice.AsyncResult begin_getMotorParams(String motor, java.util.Map<String, String> __ctx)
    {
        return begin_getMotorParams(motor, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMotorParams(String motor, Ice.Callback __cb)
    {
        return begin_getMotorParams(motor, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorParams(String motor, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMotorParams(motor, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMotorParams(String motor, Callback_JointMotor_getMotorParams __cb)
    {
        return begin_getMotorParams(motor, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorParams(String motor, java.util.Map<String, String> __ctx, Callback_JointMotor_getMotorParams __cb)
    {
        return begin_getMotorParams(motor, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMotorParams(String motor, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMotorParams_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMotorParams_name, __cb);
        try
        {
            __result.__prepare(__getMotorParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(motor);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public MotorParams end_getMotorParams(Ice.AsyncResult __result)
        throws UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __getMotorParams_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            MotorParams __ret;
            __ret = new MotorParams();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMotorState_name = "getMotorState";

    public MotorState getMotorState(String motor)
        throws UnknownMotorException
    {
        return getMotorState(motor, null, false);
    }

    public MotorState getMotorState(String motor, java.util.Map<String, String> __ctx)
        throws UnknownMotorException
    {
        return getMotorState(motor, __ctx, true);
    }

    private MotorState getMotorState(String motor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMotorState", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMotorState");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    return __del.getMotorState(motor, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMotorState(String motor)
    {
        return begin_getMotorState(motor, null, false, null);
    }

    public Ice.AsyncResult begin_getMotorState(String motor, java.util.Map<String, String> __ctx)
    {
        return begin_getMotorState(motor, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMotorState(String motor, Ice.Callback __cb)
    {
        return begin_getMotorState(motor, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorState(String motor, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMotorState(motor, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMotorState(String motor, Callback_JointMotor_getMotorState __cb)
    {
        return begin_getMotorState(motor, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorState(String motor, java.util.Map<String, String> __ctx, Callback_JointMotor_getMotorState __cb)
    {
        return begin_getMotorState(motor, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMotorState(String motor, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMotorState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMotorState_name, __cb);
        try
        {
            __result.__prepare(__getMotorState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(motor);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public MotorState end_getMotorState(Ice.AsyncResult __result)
        throws UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __getMotorState_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            MotorState __ret;
            __ret = new MotorState();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMotorStateMap_name = "getMotorStateMap";

    public java.util.Map<java.lang.String, MotorState> getMotorStateMap(String[] mList)
        throws UnknownMotorException
    {
        return getMotorStateMap(mList, null, false);
    }

    public java.util.Map<java.lang.String, MotorState> getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx)
        throws UnknownMotorException
    {
        return getMotorStateMap(mList, __ctx, true);
    }

    private java.util.Map<java.lang.String, MotorState> getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMotorStateMap", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMotorStateMap");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    return __del.getMotorStateMap(mList, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList)
    {
        return begin_getMotorStateMap(mList, null, false, null);
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx)
    {
        return begin_getMotorStateMap(mList, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList, Ice.Callback __cb)
    {
        return begin_getMotorStateMap(mList, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMotorStateMap(mList, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList, Callback_JointMotor_getMotorStateMap __cb)
    {
        return begin_getMotorStateMap(mList, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx, Callback_JointMotor_getMotorStateMap __cb)
    {
        return begin_getMotorStateMap(mList, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMotorStateMap(String[] mList, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMotorStateMap_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMotorStateMap_name, __cb);
        try
        {
            __result.__prepare(__getMotorStateMap_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MotorListHelper.write(__os, mList);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.String, MotorState> end_getMotorStateMap(Ice.AsyncResult __result)
        throws UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __getMotorStateMap_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.Map<java.lang.String, MotorState> __ret;
            __ret = MotorStateMapHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setPosition_name = "setPosition";

    public void setPosition(MotorGoalPosition goal)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setPosition(goal, null, false);
    }

    public void setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setPosition(goal, __ctx, true);
    }

    private void setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPosition", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setPosition");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    __del.setPosition(goal, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal)
    {
        return begin_setPosition(goal, null, false, null);
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx)
    {
        return begin_setPosition(goal, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, Ice.Callback __cb)
    {
        return begin_setPosition(goal, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPosition(goal, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, Callback_JointMotor_setPosition __cb)
    {
        return begin_setPosition(goal, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx, Callback_JointMotor_setPosition __cb)
    {
        return begin_setPosition(goal, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPosition(MotorGoalPosition goal, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPosition_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPosition_name, __cb);
        try
        {
            __result.__prepare(__setPosition_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            goal.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPosition(Ice.AsyncResult __result)
        throws HardwareFailedException,
               UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __setPosition_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(HardwareFailedException __ex)
                {
                    throw __ex;
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setSyncPosition_name = "setSyncPosition";

    public void setSyncPosition(MotorGoalPosition[] listGoals)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setSyncPosition(listGoals, null, false);
    }

    public void setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setSyncPosition(listGoals, __ctx, true);
    }

    private void setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSyncPosition", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setSyncPosition");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    __del.setSyncPosition(listGoals, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals)
    {
        return begin_setSyncPosition(listGoals, null, false, null);
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx)
    {
        return begin_setSyncPosition(listGoals, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, Ice.Callback __cb)
    {
        return begin_setSyncPosition(listGoals, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSyncPosition(listGoals, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, Callback_JointMotor_setSyncPosition __cb)
    {
        return begin_setSyncPosition(listGoals, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx, Callback_JointMotor_setSyncPosition __cb)
    {
        return begin_setSyncPosition(listGoals, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSyncPosition(MotorGoalPosition[] listGoals, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSyncPosition_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSyncPosition_name, __cb);
        try
        {
            __result.__prepare(__setSyncPosition_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MotorGoalPositionListHelper.write(__os, listGoals);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setSyncPosition(Ice.AsyncResult __result)
        throws HardwareFailedException,
               UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __setSyncPosition_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(HardwareFailedException __ex)
                {
                    throw __ex;
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setVelocity_name = "setVelocity";

    public void setVelocity(MotorGoalVelocity goal)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setVelocity(goal, null, false);
    }

    public void setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setVelocity(goal, __ctx, true);
    }

    private void setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws HardwareFailedException,
               UnknownMotorException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setVelocity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setVelocity");
                    __delBase = __getDelegate(false);
                    _JointMotorDel __del = (_JointMotorDel)__delBase;
                    __del.setVelocity(goal, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal)
    {
        return begin_setVelocity(goal, null, false, null);
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx)
    {
        return begin_setVelocity(goal, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, Ice.Callback __cb)
    {
        return begin_setVelocity(goal, null, false, __cb);
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setVelocity(goal, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, Callback_JointMotor_setVelocity __cb)
    {
        return begin_setVelocity(goal, null, false, __cb);
    }

    public Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx, Callback_JointMotor_setVelocity __cb)
    {
        return begin_setVelocity(goal, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setVelocity(MotorGoalVelocity goal, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setVelocity_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setVelocity_name, __cb);
        try
        {
            __result.__prepare(__setVelocity_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            goal.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setVelocity(Ice.AsyncResult __result)
        throws HardwareFailedException,
               UnknownMotorException
    {
        Ice.AsyncResult.__check(__result, this, __setVelocity_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(HardwareFailedException __ex)
                {
                    throw __ex;
                }
                catch(UnknownMotorException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static JointMotorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof JointMotorPrx)
            {
                __d = (JointMotorPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    JointMotorPrxHelper __h = new JointMotorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static JointMotorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof JointMotorPrx)
            {
                __d = (JointMotorPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    JointMotorPrxHelper __h = new JointMotorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static JointMotorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    JointMotorPrxHelper __h = new JointMotorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static JointMotorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    JointMotorPrxHelper __h = new JointMotorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static JointMotorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof JointMotorPrx)
            {
                __d = (JointMotorPrx)__obj;
            }
            else
            {
                JointMotorPrxHelper __h = new JointMotorPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static JointMotorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        JointMotorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            JointMotorPrxHelper __h = new JointMotorPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RoboCompJointMotor::JointMotor"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _JointMotorDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _JointMotorDelD();
    }

    public static void __write(IceInternal.BasicStream __os, JointMotorPrx v)
    {
        __os.writeProxy(v);
    }

    public static JointMotorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            JointMotorPrxHelper result = new JointMotorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
