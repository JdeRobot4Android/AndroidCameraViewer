// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `jointmotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RoboCompJointMotor;

public class MotorGoalVelocity implements java.lang.Cloneable, java.io.Serializable
{
    public String name;

    public float velocity;

    public float maxAcc;

    public MotorGoalVelocity()
    {
    }

    public MotorGoalVelocity(String name, float velocity, float maxAcc)
    {
        this.name = name;
        this.velocity = velocity;
        this.maxAcc = maxAcc;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MotorGoalVelocity _r = null;
        if(rhs instanceof MotorGoalVelocity)
        {
            _r = (MotorGoalVelocity)rhs;
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(velocity != _r.velocity)
            {
                return false;
            }
            if(maxAcc != _r.maxAcc)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RoboCompJointMotor::MotorGoalVelocity");
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, velocity);
        __h = IceInternal.HashUtil.hashAdd(__h, maxAcc);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        __os.writeFloat(velocity);
        __os.writeFloat(maxAcc);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        velocity = __is.readFloat();
        maxAcc = __is.readFloat();
    }

    public static final long serialVersionUID = -8327326036831260404L;
}
