// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `jointmotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RoboCompJointMotor;

public abstract class _JointMotorDisp extends Ice.ObjectImpl implements JointMotor
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RoboCompJointMotor::JointMotor"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final MotorParams[] getAllMotorParams()
    {
        return getAllMotorParams(null);
    }

    public final void getAllMotorState(MotorStateMapHolder mstateMap)
        throws UnknownMotorException
    {
        getAllMotorState(mstateMap, null);
    }

    public final BusParams getBusParams()
    {
        return getBusParams(null);
    }

    public final MotorParams getMotorParams(String motor)
        throws UnknownMotorException
    {
        return getMotorParams(motor, null);
    }

    public final MotorState getMotorState(String motor)
        throws UnknownMotorException
    {
        return getMotorState(motor, null);
    }

    public final java.util.Map<java.lang.String, MotorState> getMotorStateMap(String[] mList)
        throws UnknownMotorException
    {
        return getMotorStateMap(mList, null);
    }

    public final void setPosition(MotorGoalPosition goal)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setPosition(goal, null);
    }

    public final void setSyncPosition(MotorGoalPosition[] listGoals)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setSyncPosition(listGoals, null);
    }

    public final void setVelocity(MotorGoalVelocity goal)
        throws HardwareFailedException,
               UnknownMotorException
    {
        setVelocity(goal, null);
    }

    public static Ice.DispatchStatus ___setPosition(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MotorGoalPosition goal;
        goal = new MotorGoalPosition();
        goal.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.setPosition(goal, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(HardwareFailedException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setVelocity(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MotorGoalVelocity goal;
        goal = new MotorGoalVelocity();
        goal.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.setVelocity(goal, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(HardwareFailedException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setSyncPosition(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MotorGoalPosition[] listGoals;
        listGoals = MotorGoalPositionListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            __obj.setSyncPosition(listGoals, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(HardwareFailedException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMotorParams(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String motor;
        motor = __is.readString();
        __inS.endReadParams();
        try
        {
            MotorParams __ret = __obj.getMotorParams(motor, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMotorState(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String motor;
        motor = __is.readString();
        __inS.endReadParams();
        try
        {
            MotorState __ret = __obj.getMotorState(motor, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMotorStateMap(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String[] mList;
        mList = MotorListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            java.util.Map<java.lang.String, MotorState> __ret = __obj.getMotorStateMap(mList, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            MotorStateMapHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getAllMotorState(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        MotorStateMapHolder mstateMap = new MotorStateMapHolder();
        try
        {
            __obj.getAllMotorState(mstateMap, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            MotorStateMapHelper.write(__os, mstateMap.value);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UnknownMotorException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getAllMotorParams(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        MotorParams[] __ret = __obj.getAllMotorParams(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MotorParamsListHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getBusParams(JointMotor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        BusParams __ret = __obj.getBusParams(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getAllMotorParams",
        "getAllMotorState",
        "getBusParams",
        "getMotorParams",
        "getMotorState",
        "getMotorStateMap",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setPosition",
        "setSyncPosition",
        "setVelocity"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getAllMotorParams(this, in, __current);
            }
            case 1:
            {
                return ___getAllMotorState(this, in, __current);
            }
            case 2:
            {
                return ___getBusParams(this, in, __current);
            }
            case 3:
            {
                return ___getMotorParams(this, in, __current);
            }
            case 4:
            {
                return ___getMotorState(this, in, __current);
            }
            case 5:
            {
                return ___getMotorStateMap(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___setPosition(this, in, __current);
            }
            case 11:
            {
                return ___setSyncPosition(this, in, __current);
            }
            case 12:
            {
                return ___setVelocity(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
