// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `wiimote.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public final class wiiMotePrxHelper extends Ice.ObjectPrxHelperBase implements wiiMotePrx
{
    private static final String __activateLed_name = "activateLed";

    public int activateLed(int led)
    {
        return activateLed(led, null, false);
    }

    public int activateLed(int led, java.util.Map<String, String> __ctx)
    {
        return activateLed(led, __ctx, true);
    }

    private int activateLed(int led, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "activateLed", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("activateLed");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.activateLed(led, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_activateLed(int led)
    {
        return begin_activateLed(led, null, false, null);
    }

    public Ice.AsyncResult begin_activateLed(int led, java.util.Map<String, String> __ctx)
    {
        return begin_activateLed(led, __ctx, true, null);
    }

    public Ice.AsyncResult begin_activateLed(int led, Ice.Callback __cb)
    {
        return begin_activateLed(led, null, false, __cb);
    }

    public Ice.AsyncResult begin_activateLed(int led, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_activateLed(led, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_activateLed(int led, Callback_wiiMote_activateLed __cb)
    {
        return begin_activateLed(led, null, false, __cb);
    }

    public Ice.AsyncResult begin_activateLed(int led, java.util.Map<String, String> __ctx, Callback_wiiMote_activateLed __cb)
    {
        return begin_activateLed(led, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_activateLed(int led, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__activateLed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __activateLed_name, __cb);
        try
        {
            __result.__prepare(__activateLed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(led);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_activateLed(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __activateLed_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __changeAccMode_name = "changeAccMode";

    public int changeAccMode()
    {
        return changeAccMode(null, false);
    }

    public int changeAccMode(java.util.Map<String, String> __ctx)
    {
        return changeAccMode(__ctx, true);
    }

    private int changeAccMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeAccMode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeAccMode");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.changeAccMode(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeAccMode()
    {
        return begin_changeAccMode(null, false, null);
    }

    public Ice.AsyncResult begin_changeAccMode(java.util.Map<String, String> __ctx)
    {
        return begin_changeAccMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeAccMode(Ice.Callback __cb)
    {
        return begin_changeAccMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeAccMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeAccMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeAccMode(Callback_wiiMote_changeAccMode __cb)
    {
        return begin_changeAccMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeAccMode(java.util.Map<String, String> __ctx, Callback_wiiMote_changeAccMode __cb)
    {
        return begin_changeAccMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeAccMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeAccMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeAccMode_name, __cb);
        try
        {
            __result.__prepare(__changeAccMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_changeAccMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changeAccMode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __changeButtonMode_name = "changeButtonMode";

    public int changeButtonMode()
    {
        return changeButtonMode(null, false);
    }

    public int changeButtonMode(java.util.Map<String, String> __ctx)
    {
        return changeButtonMode(__ctx, true);
    }

    private int changeButtonMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeButtonMode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeButtonMode");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.changeButtonMode(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeButtonMode()
    {
        return begin_changeButtonMode(null, false, null);
    }

    public Ice.AsyncResult begin_changeButtonMode(java.util.Map<String, String> __ctx)
    {
        return begin_changeButtonMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeButtonMode(Ice.Callback __cb)
    {
        return begin_changeButtonMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeButtonMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeButtonMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeButtonMode(Callback_wiiMote_changeButtonMode __cb)
    {
        return begin_changeButtonMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeButtonMode(java.util.Map<String, String> __ctx, Callback_wiiMote_changeButtonMode __cb)
    {
        return begin_changeButtonMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeButtonMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeButtonMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeButtonMode_name, __cb);
        try
        {
            __result.__prepare(__changeButtonMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_changeButtonMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changeButtonMode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __changeIrMode_name = "changeIrMode";

    public int changeIrMode()
    {
        return changeIrMode(null, false);
    }

    public int changeIrMode(java.util.Map<String, String> __ctx)
    {
        return changeIrMode(__ctx, true);
    }

    private int changeIrMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeIrMode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeIrMode");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.changeIrMode(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeIrMode()
    {
        return begin_changeIrMode(null, false, null);
    }

    public Ice.AsyncResult begin_changeIrMode(java.util.Map<String, String> __ctx)
    {
        return begin_changeIrMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeIrMode(Ice.Callback __cb)
    {
        return begin_changeIrMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeIrMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeIrMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeIrMode(Callback_wiiMote_changeIrMode __cb)
    {
        return begin_changeIrMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeIrMode(java.util.Map<String, String> __ctx, Callback_wiiMote_changeIrMode __cb)
    {
        return begin_changeIrMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeIrMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeIrMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeIrMode_name, __cb);
        try
        {
            __result.__prepare(__changeIrMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_changeIrMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changeIrMode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __changeNunchukMode_name = "changeNunchukMode";

    public int changeNunchukMode()
    {
        return changeNunchukMode(null, false);
    }

    public int changeNunchukMode(java.util.Map<String, String> __ctx)
    {
        return changeNunchukMode(__ctx, true);
    }

    private int changeNunchukMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeNunchukMode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeNunchukMode");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.changeNunchukMode(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeNunchukMode()
    {
        return begin_changeNunchukMode(null, false, null);
    }

    public Ice.AsyncResult begin_changeNunchukMode(java.util.Map<String, String> __ctx)
    {
        return begin_changeNunchukMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeNunchukMode(Ice.Callback __cb)
    {
        return begin_changeNunchukMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeNunchukMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeNunchukMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeNunchukMode(Callback_wiiMote_changeNunchukMode __cb)
    {
        return begin_changeNunchukMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeNunchukMode(java.util.Map<String, String> __ctx, Callback_wiiMote_changeNunchukMode __cb)
    {
        return begin_changeNunchukMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeNunchukMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeNunchukMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeNunchukMode_name, __cb);
        try
        {
            __result.__prepare(__changeNunchukMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_changeNunchukMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changeNunchukMode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __changeRumbleMode_name = "changeRumbleMode";

    public int changeRumbleMode()
    {
        return changeRumbleMode(null, false);
    }

    public int changeRumbleMode(java.util.Map<String, String> __ctx)
    {
        return changeRumbleMode(__ctx, true);
    }

    private int changeRumbleMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeRumbleMode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeRumbleMode");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.changeRumbleMode(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeRumbleMode()
    {
        return begin_changeRumbleMode(null, false, null);
    }

    public Ice.AsyncResult begin_changeRumbleMode(java.util.Map<String, String> __ctx)
    {
        return begin_changeRumbleMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeRumbleMode(Ice.Callback __cb)
    {
        return begin_changeRumbleMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeRumbleMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeRumbleMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeRumbleMode(Callback_wiiMote_changeRumbleMode __cb)
    {
        return begin_changeRumbleMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeRumbleMode(java.util.Map<String, String> __ctx, Callback_wiiMote_changeRumbleMode __cb)
    {
        return begin_changeRumbleMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeRumbleMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeRumbleMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeRumbleMode_name, __cb);
        try
        {
            __result.__prepare(__changeRumbleMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_changeRumbleMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changeRumbleMode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAccData_name = "getAccData";

    public AccelerometerData getAccData()
    {
        return getAccData(null, false);
    }

    public AccelerometerData getAccData(java.util.Map<String, String> __ctx)
    {
        return getAccData(__ctx, true);
    }

    private AccelerometerData getAccData(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAccData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAccData");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.getAccData(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAccData()
    {
        return begin_getAccData(null, false, null);
    }

    public Ice.AsyncResult begin_getAccData(java.util.Map<String, String> __ctx)
    {
        return begin_getAccData(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAccData(Ice.Callback __cb)
    {
        return begin_getAccData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAccData(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAccData(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAccData(Callback_wiiMote_getAccData __cb)
    {
        return begin_getAccData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAccData(java.util.Map<String, String> __ctx, Callback_wiiMote_getAccData __cb)
    {
        return begin_getAccData(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAccData(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAccData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAccData_name, __cb);
        try
        {
            __result.__prepare(__getAccData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public AccelerometerData end_getAccData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAccData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            AccelerometerDataHolder __ret = new AccelerometerDataHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getBatteryStatus_name = "getBatteryStatus";

    public int getBatteryStatus()
    {
        return getBatteryStatus(null, false);
    }

    public int getBatteryStatus(java.util.Map<String, String> __ctx)
    {
        return getBatteryStatus(__ctx, true);
    }

    private int getBatteryStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBatteryStatus", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBatteryStatus");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.getBatteryStatus(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBatteryStatus()
    {
        return begin_getBatteryStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getBatteryStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getBatteryStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBatteryStatus(Ice.Callback __cb)
    {
        return begin_getBatteryStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBatteryStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBatteryStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBatteryStatus(Callback_wiiMote_getBatteryStatus __cb)
    {
        return begin_getBatteryStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBatteryStatus(java.util.Map<String, String> __ctx, Callback_wiiMote_getBatteryStatus __cb)
    {
        return begin_getBatteryStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBatteryStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBatteryStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBatteryStatus_name, __cb);
        try
        {
            __result.__prepare(__getBatteryStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getBatteryStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBatteryStatus_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getButtonData_name = "getButtonData";

    public int getButtonData()
    {
        return getButtonData(null, false);
    }

    public int getButtonData(java.util.Map<String, String> __ctx)
    {
        return getButtonData(__ctx, true);
    }

    private int getButtonData(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getButtonData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getButtonData");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.getButtonData(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getButtonData()
    {
        return begin_getButtonData(null, false, null);
    }

    public Ice.AsyncResult begin_getButtonData(java.util.Map<String, String> __ctx)
    {
        return begin_getButtonData(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getButtonData(Ice.Callback __cb)
    {
        return begin_getButtonData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getButtonData(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getButtonData(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getButtonData(Callback_wiiMote_getButtonData __cb)
    {
        return begin_getButtonData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getButtonData(java.util.Map<String, String> __ctx, Callback_wiiMote_getButtonData __cb)
    {
        return begin_getButtonData(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getButtonData(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getButtonData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getButtonData_name, __cb);
        try
        {
            __result.__prepare(__getButtonData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getButtonData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getButtonData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getIrData_name = "getIrData";

    public InfraredData getIrData()
    {
        return getIrData(null, false);
    }

    public InfraredData getIrData(java.util.Map<String, String> __ctx)
    {
        return getIrData(__ctx, true);
    }

    private InfraredData getIrData(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getIrData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getIrData");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.getIrData(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getIrData()
    {
        return begin_getIrData(null, false, null);
    }

    public Ice.AsyncResult begin_getIrData(java.util.Map<String, String> __ctx)
    {
        return begin_getIrData(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getIrData(Ice.Callback __cb)
    {
        return begin_getIrData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getIrData(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIrData(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getIrData(Callback_wiiMote_getIrData __cb)
    {
        return begin_getIrData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getIrData(java.util.Map<String, String> __ctx, Callback_wiiMote_getIrData __cb)
    {
        return begin_getIrData(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getIrData(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIrData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getIrData_name, __cb);
        try
        {
            __result.__prepare(__getIrData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public InfraredData end_getIrData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getIrData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            InfraredDataHolder __ret = new InfraredDataHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getNunchukData_name = "getNunchukData";

    public NunchukData getNunchukData()
    {
        return getNunchukData(null, false);
    }

    public NunchukData getNunchukData(java.util.Map<String, String> __ctx)
    {
        return getNunchukData(__ctx, true);
    }

    private NunchukData getNunchukData(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNunchukData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNunchukData");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.getNunchukData(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNunchukData()
    {
        return begin_getNunchukData(null, false, null);
    }

    public Ice.AsyncResult begin_getNunchukData(java.util.Map<String, String> __ctx)
    {
        return begin_getNunchukData(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNunchukData(Ice.Callback __cb)
    {
        return begin_getNunchukData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNunchukData(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNunchukData(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNunchukData(Callback_wiiMote_getNunchukData __cb)
    {
        return begin_getNunchukData(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNunchukData(java.util.Map<String, String> __ctx, Callback_wiiMote_getNunchukData __cb)
    {
        return begin_getNunchukData(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNunchukData(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNunchukData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNunchukData_name, __cb);
        try
        {
            __result.__prepare(__getNunchukData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public NunchukData end_getNunchukData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNunchukData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            NunchukDataHolder __ret = new NunchukDataHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setValue_name = "setValue";

    public int setValue(int Value)
    {
        return setValue(Value, null, false);
    }

    public int setValue(int Value, java.util.Map<String, String> __ctx)
    {
        return setValue(Value, __ctx, true);
    }

    private int setValue(int Value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setValue", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setValue");
                    __delBase = __getDelegate(false);
                    _wiiMoteDel __del = (_wiiMoteDel)__delBase;
                    return __del.setValue(Value, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setValue(int Value)
    {
        return begin_setValue(Value, null, false, null);
    }

    public Ice.AsyncResult begin_setValue(int Value, java.util.Map<String, String> __ctx)
    {
        return begin_setValue(Value, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setValue(int Value, Ice.Callback __cb)
    {
        return begin_setValue(Value, null, false, __cb);
    }

    public Ice.AsyncResult begin_setValue(int Value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setValue(Value, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setValue(int Value, Callback_wiiMote_setValue __cb)
    {
        return begin_setValue(Value, null, false, __cb);
    }

    public Ice.AsyncResult begin_setValue(int Value, java.util.Map<String, String> __ctx, Callback_wiiMote_setValue __cb)
    {
        return begin_setValue(Value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setValue(int Value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setValue_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setValue_name, __cb);
        try
        {
            __result.__prepare(__setValue_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(Value);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setValue(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setValue_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static wiiMotePrx checkedCast(Ice.ObjectPrx __obj)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof wiiMotePrx)
            {
                __d = (wiiMotePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    wiiMotePrxHelper __h = new wiiMotePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static wiiMotePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof wiiMotePrx)
            {
                __d = (wiiMotePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    wiiMotePrxHelper __h = new wiiMotePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static wiiMotePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    wiiMotePrxHelper __h = new wiiMotePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static wiiMotePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    wiiMotePrxHelper __h = new wiiMotePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static wiiMotePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof wiiMotePrx)
            {
                __d = (wiiMotePrx)__obj;
            }
            else
            {
                wiiMotePrxHelper __h = new wiiMotePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static wiiMotePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        wiiMotePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            wiiMotePrxHelper __h = new wiiMotePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::wiiMote"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _wiiMoteDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _wiiMoteDelD();
    }

    public static void __write(IceInternal.BasicStream __os, wiiMotePrx v)
    {
        __os.writeProxy(v);
    }

    public static wiiMotePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            wiiMotePrxHelper result = new wiiMotePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
