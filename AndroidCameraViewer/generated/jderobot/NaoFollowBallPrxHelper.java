// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `naofollowball.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

/**
 * Interface to the Nao follow-ball
 **/
public final class NaoFollowBallPrxHelper extends Ice.ObjectPrxHelperBase implements NaoFollowBallPrx
{
    private static final String __setMaxParams_name = "setMaxParams";

    public void setMaxParams(int rMax, int gMax, int bMax)
    {
        setMaxParams(rMax, gMax, bMax, null, false);
    }

    public void setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx)
    {
        setMaxParams(rMax, gMax, bMax, __ctx, true);
    }

    private void setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setMaxParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _NaoFollowBallDel __del = (_NaoFollowBallDel)__delBase;
                    __del.setMaxParams(rMax, gMax, bMax, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax)
    {
        return begin_setMaxParams(rMax, gMax, bMax, null, false, null);
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx)
    {
        return begin_setMaxParams(rMax, gMax, bMax, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, Ice.Callback __cb)
    {
        return begin_setMaxParams(rMax, gMax, bMax, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setMaxParams(rMax, gMax, bMax, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, Callback_NaoFollowBall_setMaxParams __cb)
    {
        return begin_setMaxParams(rMax, gMax, bMax, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx, Callback_NaoFollowBall_setMaxParams __cb)
    {
        return begin_setMaxParams(rMax, gMax, bMax, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setMaxParams(int rMax, int gMax, int bMax, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setMaxParams_name, __cb);
        try
        {
            __result.__prepare(__setMaxParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(rMax);
            __os.writeInt(gMax);
            __os.writeInt(bMax);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setMaxParams(Ice.AsyncResult __result)
    {
        __end(__result, __setMaxParams_name);
    }

    private static final String __setMinParams_name = "setMinParams";

    public void setMinParams(int rMin, int gMin, int bMin)
    {
        setMinParams(rMin, gMin, bMin, null, false);
    }

    public void setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx)
    {
        setMinParams(rMin, gMin, bMin, __ctx, true);
    }

    private void setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setMinParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _NaoFollowBallDel __del = (_NaoFollowBallDel)__delBase;
                    __del.setMinParams(rMin, gMin, bMin, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin)
    {
        return begin_setMinParams(rMin, gMin, bMin, null, false, null);
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx)
    {
        return begin_setMinParams(rMin, gMin, bMin, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, Ice.Callback __cb)
    {
        return begin_setMinParams(rMin, gMin, bMin, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setMinParams(rMin, gMin, bMin, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, Callback_NaoFollowBall_setMinParams __cb)
    {
        return begin_setMinParams(rMin, gMin, bMin, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx, Callback_NaoFollowBall_setMinParams __cb)
    {
        return begin_setMinParams(rMin, gMin, bMin, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setMinParams(int rMin, int gMin, int bMin, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setMinParams_name, __cb);
        try
        {
            __result.__prepare(__setMinParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(rMin);
            __os.writeInt(gMin);
            __os.writeInt(bMin);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setMinParams(Ice.AsyncResult __result)
    {
        __end(__result, __setMinParams_name);
    }

    private static final String __setParams_name = "setParams";

    public void setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax)
    {
        setParams(rMin, rMax, gMin, gMax, bMin, bMax, null, false);
    }

    public void setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx)
    {
        setParams(rMin, rMax, gMin, gMax, bMin, bMax, __ctx, true);
    }

    private void setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setParams", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _NaoFollowBallDel __del = (_NaoFollowBallDel)__delBase;
                    __del.setParams(rMin, rMax, gMin, gMax, bMin, bMax, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, null, false, null);
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, Ice.Callback __cb)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, null, false, __cb);
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, Callback_NaoFollowBall_setParams __cb)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, null, false, __cb);
    }

    public Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx, Callback_NaoFollowBall_setParams __cb)
    {
        return begin_setParams(rMin, rMax, gMin, gMax, bMin, bMax, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setParams_name, __cb);
        try
        {
            __result.__prepare(__setParams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(rMin);
            __os.writeInt(rMax);
            __os.writeInt(gMin);
            __os.writeInt(gMax);
            __os.writeInt(bMin);
            __os.writeInt(bMax);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setParams(Ice.AsyncResult __result)
    {
        __end(__result, __setParams_name);
    }

    private static final String __start_name = "start";

    public void start()
    {
        start(null, false);
    }

    public void start(java.util.Map<String, String> __ctx)
    {
        start(__ctx, true);
    }

    private void start(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "start", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _NaoFollowBallDel __del = (_NaoFollowBallDel)__delBase;
                    __del.start(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_start()
    {
        return begin_start(null, false, null);
    }

    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx)
    {
        return begin_start(__ctx, true, null);
    }

    public Ice.AsyncResult begin_start(Ice.Callback __cb)
    {
        return begin_start(null, false, __cb);
    }

    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_start(Callback_NaoFollowBall_start __cb)
    {
        return begin_start(null, false, __cb);
    }

    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_NaoFollowBall_start __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __start_name, __cb);
        try
        {
            __result.__prepare(__start_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_start(Ice.AsyncResult __result)
    {
        __end(__result, __start_name);
    }

    private static final String __stop_name = "stop";

    public void stop()
    {
        stop(null, false);
    }

    public void stop(java.util.Map<String, String> __ctx)
    {
        stop(__ctx, true);
    }

    private void stop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _NaoFollowBallDel __del = (_NaoFollowBallDel)__delBase;
                    __del.stop(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stop()
    {
        return begin_stop(null, false, null);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx)
    {
        return begin_stop(__ctx, true, null);
    }

    public Ice.AsyncResult begin_stop(Ice.Callback __cb)
    {
        return begin_stop(null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stop(Callback_NaoFollowBall_stop __cb)
    {
        return begin_stop(null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_NaoFollowBall_stop __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stop_name, __cb);
        try
        {
            __result.__prepare(__stop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stop(Ice.AsyncResult __result)
    {
        __end(__result, __stop_name);
    }

    public static NaoFollowBallPrx checkedCast(Ice.ObjectPrx __obj)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof NaoFollowBallPrx)
            {
                __d = (NaoFollowBallPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static NaoFollowBallPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof NaoFollowBallPrx)
            {
                __d = (NaoFollowBallPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static NaoFollowBallPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static NaoFollowBallPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static NaoFollowBallPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof NaoFollowBallPrx)
            {
                __d = (NaoFollowBallPrx)__obj;
            }
            else
            {
                NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static NaoFollowBallPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        NaoFollowBallPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            NaoFollowBallPrxHelper __h = new NaoFollowBallPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::NaoFollowBall"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _NaoFollowBallDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _NaoFollowBallDelD();
    }

    public static void __write(IceInternal.BasicStream __os, NaoFollowBallPrx v)
    {
        __os.writeProxy(v);
    }

    public static NaoFollowBallPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            NaoFollowBallPrxHelper result = new NaoFollowBallPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
