// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `namingService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public class NamingNode extends Ice.ObjectImpl
{
    public NamingNode()
    {
    }

    public NamingNode(String name, String interfaceName, String protocol, String ip, int port)
    {
        this.name = name;
        this.interfaceName = interfaceName;
        this.protocol = protocol;
        this.ip = ip;
        this.port = port;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new NamingNode();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::NamingNode"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeString(name);
        __os.writeString(interfaceName);
        __os.writeString(protocol);
        __os.writeString(ip);
        __os.writeInt(port);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        name = __is.readString();
        interfaceName = __is.readString();
        protocol = __is.readString();
        ip = __is.readString();
        port = __is.readInt();
        __is.endReadSlice();
    }

    public String name;

    public String interfaceName;

    public String protocol;

    public String ip;

    public int port;

    public static final long serialVersionUID = 223065962454445768L;
}
