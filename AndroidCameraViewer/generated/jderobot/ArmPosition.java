// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `bodymovements.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

/**
 * simply Arm position
 **/
public class ArmPosition implements java.lang.Cloneable, java.io.Serializable
{
    public BodyMotor shoulder;

    public BodyMotor elbow;

    public ArmPosition()
    {
    }

    public ArmPosition(BodyMotor shoulder, BodyMotor elbow)
    {
        this.shoulder = shoulder;
        this.elbow = elbow;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ArmPosition _r = null;
        if(rhs instanceof ArmPosition)
        {
            _r = (ArmPosition)rhs;
        }

        if(_r != null)
        {
            if(shoulder != _r.shoulder)
            {
                if(shoulder == null || _r.shoulder == null || !shoulder.equals(_r.shoulder))
                {
                    return false;
                }
            }
            if(elbow != _r.elbow)
            {
                if(elbow == null || _r.elbow == null || !elbow.equals(_r.elbow))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::jderobot::ArmPosition");
        __h = IceInternal.HashUtil.hashAdd(__h, shoulder);
        __h = IceInternal.HashUtil.hashAdd(__h, elbow);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        shoulder.__write(__os);
        elbow.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        shoulder = new BodyMotor();
        shoulder.__read(__is);
        elbow = new BodyMotor();
        elbow.__read(__is);
    }

    public static final long serialVersionUID = 8299960469268245806L;
}
