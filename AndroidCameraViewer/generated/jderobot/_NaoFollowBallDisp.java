// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `naofollowball.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

/**
 * Interface to the Nao follow-ball
 **/
public abstract class _NaoFollowBallDisp extends Ice.ObjectImpl implements NaoFollowBall
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::NaoFollowBall"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void setMaxParams(int rMax, int gMax, int bMax)
    {
        setMaxParams(rMax, gMax, bMax, null);
    }

    public final void setMinParams(int rMin, int gMin, int bMin)
    {
        setMinParams(rMin, gMin, bMin, null);
    }

    public final void setParams(int rMin, int rMax, int gMin, int gMax, int bMin, int bMax)
    {
        setParams(rMin, rMax, gMin, gMax, bMin, bMax, null);
    }

    public final void start()
    {
        start(null);
    }

    public final void stop()
    {
        stop(null);
    }

    public static Ice.DispatchStatus ___setParams(NaoFollowBall __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int rMin;
        int rMax;
        int gMin;
        int gMax;
        int bMin;
        int bMax;
        rMin = __is.readInt();
        rMax = __is.readInt();
        gMin = __is.readInt();
        gMax = __is.readInt();
        bMin = __is.readInt();
        bMax = __is.readInt();
        __inS.endReadParams();
        __obj.setParams(rMin, rMax, gMin, gMax, bMin, bMax, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setMinParams(NaoFollowBall __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int rMin;
        int gMin;
        int bMin;
        rMin = __is.readInt();
        gMin = __is.readInt();
        bMin = __is.readInt();
        __inS.endReadParams();
        __obj.setMinParams(rMin, gMin, bMin, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setMaxParams(NaoFollowBall __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int rMax;
        int gMax;
        int bMax;
        rMax = __is.readInt();
        gMax = __is.readInt();
        bMax = __is.readInt();
        __inS.endReadParams();
        __obj.setMaxParams(rMax, gMax, bMax, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___start(NaoFollowBall __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.start(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stop(NaoFollowBall __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.stop(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setMaxParams",
        "setMinParams",
        "setParams",
        "start",
        "stop"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___ice_id(this, in, __current);
            }
            case 1:
            {
                return ___ice_ids(this, in, __current);
            }
            case 2:
            {
                return ___ice_isA(this, in, __current);
            }
            case 3:
            {
                return ___ice_ping(this, in, __current);
            }
            case 4:
            {
                return ___setMaxParams(this, in, __current);
            }
            case 5:
            {
                return ___setMinParams(this, in, __current);
            }
            case 6:
            {
                return ___setParams(this, in, __current);
            }
            case 7:
            {
                return ___start(this, in, __current);
            }
            case 8:
            {
                return ___stop(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
