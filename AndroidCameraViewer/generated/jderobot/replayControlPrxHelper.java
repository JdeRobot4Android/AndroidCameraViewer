// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `replayControl.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public final class replayControlPrxHelper extends Ice.ObjectPrxHelperBase implements replayControlPrx
{
    private static final String __getTime_name = "getTime";

    public long getTime()
    {
        return getTime(null, false);
    }

    public long getTime(java.util.Map<String, String> __ctx)
    {
        return getTime(__ctx, true);
    }

    private long getTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTime");
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    return __del.getTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTime()
    {
        return begin_getTime(null, false, null);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx)
    {
        return begin_getTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTime(Ice.Callback __cb)
    {
        return begin_getTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTime(Callback_replayControl_getTime __cb)
    {
        return begin_getTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Callback_replayControl_getTime __cb)
    {
        return begin_getTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTime_name, __cb);
        try
        {
            __result.__prepare(__getTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_getTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __goTo_name = "goTo";

    public boolean goTo(long seek)
    {
        return goTo(seek, null, false);
    }

    public boolean goTo(long seek, java.util.Map<String, String> __ctx)
    {
        return goTo(seek, __ctx, true);
    }

    private boolean goTo(long seek, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "goTo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("goTo");
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    return __del.goTo(seek, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_goTo(long seek)
    {
        return begin_goTo(seek, null, false, null);
    }

    public Ice.AsyncResult begin_goTo(long seek, java.util.Map<String, String> __ctx)
    {
        return begin_goTo(seek, __ctx, true, null);
    }

    public Ice.AsyncResult begin_goTo(long seek, Ice.Callback __cb)
    {
        return begin_goTo(seek, null, false, __cb);
    }

    public Ice.AsyncResult begin_goTo(long seek, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_goTo(seek, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_goTo(long seek, Callback_replayControl_goTo __cb)
    {
        return begin_goTo(seek, null, false, __cb);
    }

    public Ice.AsyncResult begin_goTo(long seek, java.util.Map<String, String> __ctx, Callback_replayControl_goTo __cb)
    {
        return begin_goTo(seek, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_goTo(long seek, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__goTo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __goTo_name, __cb);
        try
        {
            __result.__prepare(__goTo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(seek);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_goTo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __goTo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __pause_name = "pause";

    public boolean pause()
    {
        return pause(null, false);
    }

    public boolean pause(java.util.Map<String, String> __ctx)
    {
        return pause(__ctx, true);
    }

    private boolean pause(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pause", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("pause");
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    return __del.pause(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pause()
    {
        return begin_pause(null, false, null);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx)
    {
        return begin_pause(__ctx, true, null);
    }

    public Ice.AsyncResult begin_pause(Ice.Callback __cb)
    {
        return begin_pause(null, false, __cb);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pause(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pause(Callback_replayControl_pause __cb)
    {
        return begin_pause(null, false, __cb);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, Callback_replayControl_pause __cb)
    {
        return begin_pause(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__pause_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pause_name, __cb);
        try
        {
            __result.__prepare(__pause_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_pause(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __pause_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __resume_name = "resume";

    public boolean resume()
    {
        return resume(null, false);
    }

    public boolean resume(java.util.Map<String, String> __ctx)
    {
        return resume(__ctx, true);
    }

    private boolean resume(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resume");
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    return __del.resume(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_resume()
    {
        return begin_resume(null, false, null);
    }

    public Ice.AsyncResult begin_resume(java.util.Map<String, String> __ctx)
    {
        return begin_resume(__ctx, true, null);
    }

    public Ice.AsyncResult begin_resume(Ice.Callback __cb)
    {
        return begin_resume(null, false, __cb);
    }

    public Ice.AsyncResult begin_resume(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resume(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_resume(Callback_replayControl_resume __cb)
    {
        return begin_resume(null, false, __cb);
    }

    public Ice.AsyncResult begin_resume(java.util.Map<String, String> __ctx, Callback_replayControl_resume __cb)
    {
        return begin_resume(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resume(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resume_name, __cb);
        try
        {
            __result.__prepare(__resume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_resume(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __resume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setReplay_name = "setReplay";

    public void setReplay(boolean replay)
    {
        setReplay(replay, null, false);
    }

    public void setReplay(boolean replay, java.util.Map<String, String> __ctx)
    {
        setReplay(replay, __ctx, true);
    }

    private void setReplay(boolean replay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setReplay", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    __del.setReplay(replay, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setReplay(boolean replay)
    {
        return begin_setReplay(replay, null, false, null);
    }

    public Ice.AsyncResult begin_setReplay(boolean replay, java.util.Map<String, String> __ctx)
    {
        return begin_setReplay(replay, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setReplay(boolean replay, Ice.Callback __cb)
    {
        return begin_setReplay(replay, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReplay(boolean replay, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setReplay(replay, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setReplay(boolean replay, Callback_replayControl_setReplay __cb)
    {
        return begin_setReplay(replay, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReplay(boolean replay, java.util.Map<String, String> __ctx, Callback_replayControl_setReplay __cb)
    {
        return begin_setReplay(replay, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setReplay(boolean replay, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setReplay_name, __cb);
        try
        {
            __result.__prepare(__setReplay_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(replay);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setReplay(Ice.AsyncResult __result)
    {
        __end(__result, __setReplay_name);
    }

    private static final String __setStep_name = "setStep";

    public boolean setStep(int step)
    {
        return setStep(step, null, false);
    }

    public boolean setStep(int step, java.util.Map<String, String> __ctx)
    {
        return setStep(step, __ctx, true);
    }

    private boolean setStep(int step, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setStep", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setStep");
                    __delBase = __getDelegate(false);
                    _replayControlDel __del = (_replayControlDel)__delBase;
                    return __del.setStep(step, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setStep(int step)
    {
        return begin_setStep(step, null, false, null);
    }

    public Ice.AsyncResult begin_setStep(int step, java.util.Map<String, String> __ctx)
    {
        return begin_setStep(step, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setStep(int step, Ice.Callback __cb)
    {
        return begin_setStep(step, null, false, __cb);
    }

    public Ice.AsyncResult begin_setStep(int step, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setStep(step, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setStep(int step, Callback_replayControl_setStep __cb)
    {
        return begin_setStep(step, null, false, __cb);
    }

    public Ice.AsyncResult begin_setStep(int step, java.util.Map<String, String> __ctx, Callback_replayControl_setStep __cb)
    {
        return begin_setStep(step, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setStep(int step, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setStep_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setStep_name, __cb);
        try
        {
            __result.__prepare(__setStep_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(step);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setStep(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setStep_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static replayControlPrx checkedCast(Ice.ObjectPrx __obj)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof replayControlPrx)
            {
                __d = (replayControlPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    replayControlPrxHelper __h = new replayControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static replayControlPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof replayControlPrx)
            {
                __d = (replayControlPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    replayControlPrxHelper __h = new replayControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static replayControlPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    replayControlPrxHelper __h = new replayControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static replayControlPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    replayControlPrxHelper __h = new replayControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static replayControlPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof replayControlPrx)
            {
                __d = (replayControlPrx)__obj;
            }
            else
            {
                replayControlPrxHelper __h = new replayControlPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static replayControlPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        replayControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            replayControlPrxHelper __h = new replayControlPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::replayControl"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _replayControlDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _replayControlDelD();
    }

    public static void __write(IceInternal.BasicStream __os, replayControlPrx v)
    {
        __os.writeProxy(v);
    }

    public static replayControlPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            replayControlPrxHelper result = new replayControlPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
